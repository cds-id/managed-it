// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum UserRole {
  ADMIN
  WORKER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           UserRole @default(WORKER)

  tokens        Token[]
  sessions      Session[]
  assignedTasks Task[]    @relation("TaskAssignees")
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

model Client {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  contactInfo String
  notes       String?  @db.Text  // Keep it as notes to match the UI

  tasks   Task[]
  sprints Sprint[]
}

model Task {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  description String?    @db.Text
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(TODO)
  deadline    DateTime?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  assignees   User[]       @relation("TaskAssignees")
  sprintTasks SprintTask[]
}

model Sprint {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  startDate DateTime  @default(now())
  endDate   DateTime?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  sprintTasks SprintTask[]
}

model SprintTask {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sprint   Sprint @relation(fields: [sprintId], references: [id])
  sprintId String

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  @@unique([sprintId, taskId])
}

enum TokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
}
